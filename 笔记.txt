【0】
    于博
    yub_bj@farsight.com.cn
     


【1】数据结构：
	1、数据：基本数据类型、构造数据类型
		数据即信息的载体，是能够输入到计算机中并且能被计算机识别、存储和处理的符号总称。
		数据元素（Data Element）
		数据元素是数据的基本单位，又称之为记录。一般由若干基本项（或称字段、域、属性）组成。
		数据类型（Data Type）是对数据元素取值范围与运算的限定。



	2、结构：指数据之间的相互关系
	   1> 逻辑结构：是从具体问题中抽象出来的数学模型
		线性结构：一个对一个，如线性表、栈、队列
		集合    ：数据元素间除“同属于一个集合”外，无其它关系
		树形结构：一个对多个，如树
		图状结构：多个对多个，如图
	
	   2> 存储结构：数据的存储结构指的是数据的逻辑结构在计算机存储器中的映象（或表示）
		顺序：借助元素在存储器中的相对位置来表示数据元素间的逻辑关系
		链式：借助指示元素存储地址的指针表示数据元素间的逻辑关系
		索引：在存储数据的同时，建立一个附加的索引表，即索引存储结构=数据文件+索引表。 
		散列：根据数据元素的特殊字段(称为关键字key)，计算数据元素的存放地址，然后数			      		      据元素按地址存放，所得到的存储结构为散列存储结构(或Hash结构)。


	 -- 数据
	|
	|	  		 -- 线性：线性表、链表、队列、栈
	|			|
	|	 		|
 	|	数据的逻辑结构--	
	|	|		|
	|	|		|
	|	|   		 -- 非线性：集合、树、图 
数据结构 -- 结构      
	|	|
	|	| 		 -- 顺序存储结构
	|	|	  	|
	|	| 		|-- 链式存储结构
 	|	数据的存储结构--	
	|	  		|-- 索引存储
	|	  		|
	|	   		 -- 散列存储
	|
	|
 	 -- 数据运算：增、删、改、查



【2】数据结构（Data Structure）
数据结构 + 算法 = 程序
综上所述，数据结构主要是研究非数值性程序设计中计算机操作的对象（数据）及其相互间关系和运算的学科。
有人认为：按照某种逻辑关系组织起来的一批数据，应用计算机语言，按照一定的存取方式把它们存储到计算机存储器中，并为这些数据定义一个运算集合，就称为一个数据结构。 



【3】算法
	1．算法的定义
	  算法（Algorithm）是一个有穷规则（或语句、指令）的有序集合。它确定了解决某一问题的一个运算序列。对于问题的初始输入，通过算法有限步的运行，产生一个或多个输出。

	2、数据结构与算法
	  算法设计:  取决于选定的逻辑结构
	  算法实现: 依赖于采用的存储结构


	3、算法的特性
	   有穷性 ―― 算法执行的步骤（或规则）是有限的；
	   确定性 ―― 每个计算步骤无二义性；
	   可行性 ―― 每个计算步骤能够在有限的时间内完成；
	   输  入 ―― 算法有一个或多个外部输入；
	   输  出 ―― 算法有一个或多个输出。


	4、算法分析
	   解决一个问题可以有多种不同的算法，在算法正确的前提下，评价算法好坏的方法 ：
	   消耗时间的多少 ：
	   消耗存储空间的多少 ：
	   容易理解、容易编程和调试、容易维护。时间复杂度 的概念介绍 ：
	   问题的规模 ：输入数据量的大小，用n来表示。
	   算法的时间复杂度 ：算法消耗时间，它是问题规模的函数 T(n)。



【5】
	栈：先进后出
	队列：先进先出



【6】树


	1、度数：
一个节点的子树的个数称为该节点的度数，一棵树的度数是指该树中节点的最大度数。

	2、树叶:
度数为零的节点称为树叶或终端节点，度数不为零的节点称为分支节点，除根节点外的分支节点称为内部节点。

	3、父节点、子节点:
一个节点的子树之根节点称为该节点的子节点，该节点称为它们的父节点，同一节点的各个子节点之间称为兄弟节点。一棵树的根节点没有父节点，叶节点没有子节点。

	4、祖先、子孙
一个节点系列k1,k2, ……,ki,ki+1, ……,kj,并满足ki是ki+1的父节点，就称为一条从k1到kj的路径，路径的长度为j-1,即路径中的边数。路径中前面的节点是后面节点的祖先，后面节点是前面节点的子孙。 
	

	5、层数、深度
根节点的层数定义为1，节点的层数等于父节点的层数加1。树中节点层数的最大值称为该树的深度（高度）。

	6、有序树
若树中每个节点的各个子树的排列为从左到右，不能交换，即兄弟之间是有序的，则该树称为有序树。一般的树是有序树。

	7、森林
m（m≥0）棵互不相交的树的集合称为森林。树去掉根节点就成为森林，森林加上一个新的根节点就成为树。





【7】二叉树

	1、二叉树的定义 ： 
二叉树（Binary Tree）是n（n≥0）个节点的有限集合，它或者是空集（n＝0），或者是由一个根节点以及两棵互不相交的、分别称为左子树和右子树的二叉树组成。二叉树与普通有序树不同，二叉树严格区分左孩子和右孩子，即使只有一个子节点也要区分左右。



	2、二叉树的性质 ：
	   二叉树第i（i≥1）层上的节点最多为2i-1个。
	   深度为k（k≥1）的二叉树最多有2k－1个节点。
	   在任意一棵二叉树中，树叶的数目比度数为2的节点的数目多一。
	   总节点数为各类节点之和：n = n0 + n1 + n2  
	   总节点数为所有子节点数加一：n = n1 + 2*n2 + 1  故得：n0 = n2 + 1 ;
	   满二叉树 ：深度为k（k≥1）时有2k－1个节点的二叉树。


	3、三种基本的遍历算法如下 ：
	   先访问树根，再访问左子树，最后访问右子树；(先序)
	   先访问左子树，再访问树根，最后访问右子树；（中序）
	   先访问左子树，再访问右子树，最后访问树根；（后序）

	
	4、完全二叉树
		
	   节点的类型：
	   typedef  struct  node_t;		/*定义二叉树节点的内部结构*/
	   {
		data_t data ; 			/*编号*/
		struct node_t  *lchild ;
		struct node_t *rchild ; 	/*指向左孩子和右孩子的指针*/
	   } bitree_t ; 				/*二叉树节点类型*/


	   完全二叉树节点的编号方法是：
	   设完全二叉树的节点数为n，根节点为1号节点，某节点编号为 i。
	   当2*i ≤ n时，有左孩子，其编号为2*i ,否则没有左孩子，本身是叶节点;
	   当2*i＋1 ≤ n时，有右孩子，其编号为2*i+1 ,否则没有右孩子；









